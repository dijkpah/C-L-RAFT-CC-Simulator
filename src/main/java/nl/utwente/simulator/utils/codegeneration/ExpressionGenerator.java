package nl.utwente.simulator.utils.codegeneration;

import nl.utwente.simulator.config.Expression;
import nl.utwente.simulator.config.Settings;
import org.codehaus.janino.JavaSourceClassLoader;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import static nl.utwente.simulator.config.Settings.*;

/**
 * Converts a mathematical expression to an <code>Expression</code> containing a function to evaluate the expression
 */
public class ExpressionGenerator {

    public static final String EXPRESSION_AFFIX = "Implementation";                                                     //Affix for classname
    public static final ExpressionConverter converter = new ExpressionConverter();                                      //Static implementation not possible due to autogenerated code
    public static final String codeTemplate =
            "package nl.utwente.simulator.config;" +
            "public class %s extends %s {" +
                "public double evaluate(long I, long M, long C, long P, long R, long EN, long EC, long MC){" +
                    "return %s;" +
                "}" +
            "}";

    public static Expression generate(String expression) throws ParseException {
        Settings.log.debugln("converted from "+expression);
        if(expression.replace("(","").length() != expression.replace(")","").length()){
            throw new ParseException("Missing parenthesis",0);
        }
        String javaFunction = converter.convert(desugar(expression));
        Settings.log.debugln("converted to "+javaFunction);

        String janinoFile = String.format(
            codeTemplate,
            Expression.class.getSimpleName()+EXPRESSION_AFFIX,
            Expression.class.getSimpleName(),
            javaFunction
        );

        ClassLoader parentClassLoader = ExpressionGenerator.class.getClassLoader();
        byte[] ba = janinoFile.getBytes();
        Map map = new HashMap();
        map.put(Expression.class.getName().replace('.', '/')+EXPRESSION_AFFIX , ba);
        MapResourceFinder mrf = new MapResourceFinder(map);

        ClassLoader cl = new JavaSourceClassLoader(parentClassLoader, mrf, "utf-8");
        try {
            return (Expression) cl.loadClass(Expression.class.getName()+EXPRESSION_AFFIX).newInstance();
        } catch (Exception e) {
            throw new ParseException("Unable to load expression: "+e.getMessage(),0);
        }
    }

    /**
     * Since Expression only contains <code>Species</code>-specific properties we need to inject some value which are
     * defined in <code>Settings</code>.
     *
     * CONVERTS:
     *
     * - w -> p.getWeight()
     * - l -> Settings.MONOMER_LENGTH
     *
     * ALIASES
     *
     * - n: number of segments -> (I+M+2C-P)
     * - m: number of crosslinks,ignoring cycles -> (R-1)
     */
    private static String desugar(String string){
        return string
            .replace("SIZE", "2*"+INTERACTION_RADIUS_FORMULA)
            .replace("w", String.format(Locale.ROOT,"(I*%f+M*%f+C*%f)", WEIGHT_HALF_INITIATOR, WEIGHT_MONOMER, WEIGHT_CROSSLINKER))
            .replace("l", "("+MONOMER_LENGTH +")")
            .replace("n", "(I+M+2C-P)")
            .replace("m", "(C-P)")
            ;
    }
}
